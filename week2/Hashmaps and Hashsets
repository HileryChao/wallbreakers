1)

class Solution(object):
    def numJewelsInStones(self, J, S):
        jewelsSet = set()
        for letter in J:
            jewelsSet.add(letter)
            
        numJewels = 0
        for letter in S:
            if letter in jewelsSet:
                numJewels+=1
        
        return numJewels

2)

class Solution(object):
    def uniqueMorseRepresentations(self, words):
        transformationSet = set()
        
        for word in words:
            transformation = self.translateMorse(word)
            transformationSet.add(transformation)
            
        return len(transformationSet)
    
    
    def translateMorse(self, word):
        morseArray = [".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."]
        strArray = []
        
        for letter in word:
            letterIndex = ord(letter.lower()) - ord('a')
            letterMorse = morseArray[letterIndex]
            strArray.append(letterMorse)
            
        return ''.join(strArray)

            
3)

class Solution(object):
    def isHappy(self, n):
        numbers = set()
        currNumber = n
        while not ((1 in numbers) or (currNumber in numbers)):
            newNumber = 0
            for digitStr in str(currNumber):
                newNumber += int(digitStr)**2
            numbers.add(currNumber)
            currNumber = newNumber
            
        return (1 in numbers)

4)

class Solution(object):
    def uncommonFromSentences(self, A, B):
        wordsA = A.split(" ")
        wordsB = B.split(" ")
        encounteredWords = {}

        for word in wordsA:
            if encounteredWords.get(word) == None:
                encounteredWords[word] = 1
            else:
                encounteredWords[word] += 1
        
        for word in wordsB:
            if encounteredWords.get(word) == None:
                encounteredWords[word] = 1
            else:
                encounteredWords[word] += 1
        
        uncommonWords = []
        
        for key,value in encounteredWords.iteritems():
            if (value == 1):
                uncommonWords.append(key)
         
        return uncommonWords

5)

class Solution(object):
    def distributeCandies(self, candies):
        uniqueCandies = set()
        for candy in candies:
            uniqueCandies.add(candy)
        
        return min(len(uniqueCandies), len(candies)/2)


6)

class Solution(object):
    def numSpecialEquivGroups(self, A):
        groups = set()
        for word in A:
            groups.add(self.createEvenStrSorted(word) + self.createOddStrSorted(word))
        return len(groups)
    
    def createEvenStrSorted(self, word):
        evenStr = []
        for index, letter in enumerate(word):
            if (index % 2 == 0):
                evenStr.append(letter)
        return ''.join(sorted(evenStr))
            
    def createOddStrSorted(self, word):
        oddStr = []
        for index, letter in enumerate(word):
            if (index % 2 == 1):
                oddStr.append(letter)
        return ''.join(sorted(oddStr))
     
7)

class Solution(object):
    def intersection(self, nums1, nums2):
        intersection = set()
        toReturn = []
        for num in nums1:
            intersection.add(num)
        for num in nums2:
            if num in intersection:
                toReturn.append(num)
                intersection.remove(num)
        
        return toReturn

8)

class Solution(object):
    
    def isValidSudoku(self, board):
        for i in range(0,9,1):
            if not self.isValidSection(board, i, i+1, 0, 9):
                return False
            if not self.isValidSection(board, 0, 9, i, i+1):
                return False
        for i in range(0, 9, 3):
            for j in range(0, 9, 3):
                if not self.isValidSection(board, i, i + 3, j, j + 3):
                    return False
        return True
                
    def initializeValidNums(self):
        validNums = set()
        for i in range(0, 9):
            validNums.add(str(i + 1))
        return validNums
        
    def isValidSection(self, board, startI, endI, startJ, endJ):
        uniqueNums = set()
        validNums = self.initializeValidNums()
        for i in range(startI, endI):
            for j in range(startJ, endJ):
                if board[i][j] == ".":
                    continue
                elif board[i][j] in validNums:
                    if board[i][j] not in uniqueNums:
                        uniqueNums.add(board[i][j])
                    else:
                        return False
                else:
                    return False
        return True
        
9)

class Solution(object):
    def isIsomorphic(self, s, t):
        firstLetterPosns = {}
        for index, letter in enumerate(s):
            if firstLetterPosns.get(letter) == None:
                firstLetterPosns[letter] = [index]
            else:
                firstLetterPosns[letter].append(index)
                
        for index, letter in enumerate(t):
            if len(firstLetterPosns.get(s[index])) > 1:
                tSet = set()
                for position in firstLetterPosns.get(s[index]):
                    tSet.add(t[position])
                if len(tSet) != 1:
                    return False
            else:
                if t.count(t[index]) > 1:
                    return False
        
        return True


10)

class Solution(object):
    def wordPattern(self, pattern, str):
        strSplit = str.split(" ") 
        bijectionMap = {}
        mappedWords = set()
        if len(strSplit) != len(pattern):
            return False
        for index, letter in enumerate(pattern):
            if bijectionMap.get(letter) == None:
                if strSplit[index] in mappedWords:
                    return False
                bijectionMap[letter] = strSplit[index]
                mappedWords.add(strSplit[index])
            else:
                if (bijectionMap[letter] != strSplit[index]):
                    return False
        return True

11)

class Node(object):
    def __init__(self, key, value):
        self.key = key
        self.value = value
        self.next = None

class MyHashMap(object):

    def __init__(self):
        self.map = [None] * 1000000
        
    def getHashCode(self, key):
        return key%len(self.map)
        
    def put(self, key, value):
        index = self.getHashCode(key)
        if self.map[index] == None:
            self.map[index] = Node(key, value)
        else:
            currNode = self.map[index]
            while currNode != None:
                if currNode.key == key:
                    currNode.value = value
                    return
                currNode = currNode.next
            curr.next = Node(key, value)
        return
        

    def get(self, key):
        index = self.getHashCode(key)
        if self.map[index] == None:
            return -1
        currNode = self.map[index]
        while currNode != None:
            if currNode.key == key:
                return currNode.value
            curr = curr.next
        return -1
        

    def remove(self, key):
        index = self.getHashCode(key)
        if self.map[index] == None:
            return
        currNode = self.map[index]
        prevNode = currNode
        if currNode.key == key:
            self.map[index] = currNode.next
            return
        currNode = currNode.next
        while currNode != None:
            if currNode.key == key:
                prevNode.next = currNode.next
                return
            prevNode = currNode
            currNode = currNode.next

12)

class Node(object):
    def __init__(self, value):
        self.value = value
        self.next = None

class MyHashSet(object):

    def __init__(self):
        self.set = [None] * 1000000

    def getHashCode(self, key):
        return key%len(self.set)
    
    def add(self, key):
        index = self.getHashCode(key)
        if self.set[index] == None:
            self.set[index] = Node(key)
            return
        else:
            currNode = self.set[index]
            while currNode != None:
                if currNode.value == key:
                    return
                currNode = currNode.next
            currNode.next = Node(key)
        return
        

    def remove(self, key):
        index = self.getHashCode(key)
        if self.set[index] == None:
            return
        currNode = self.set[index]
        prevNode = currNode
        if currNode.value == key:
            self.set[index] = currNode.next
            return
        currNode = currNode.next
        while currNode != None:
            if currNode.value == key:
                prevNode.next = currNode.next
                return
            prevNode = currNode
            currNode = currNode.next
        

    def contains(self, key):
        index = self.getHashCode(key)
        if self.set[index] == None:
            return False
        currNode = self.set[index]
        while currNode != None:
            if currNode.value == key:
                return True
            currNode = currNode.next
        return False
        
