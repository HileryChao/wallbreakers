1) 

class Solution(object):
    def findAnagrams(self, s, p):
        counterP = collections.Counter(p)
        counterS = collections.Counter(s[0:len(p) - 1])
        toReturn = []
        for index in range(len(p)-1, len(s)):
            counterS[s[index]] += 1
            if counterS == counterP:
                toReturn.append(index+1-len(p))
            counterS[s[index-len(p)+1]] -= 1
            if counterS[s[index+1-len(p)]] == 0:
                del counterS[s[index-len(p)+1]] 
        
        return toReturn

2)

class Solution(object):
    def firstUniqChar(self, s):
        letterToIndex = {}
        counter = collections.Counter()
        for index, letter in enumerate(s):
            counter[letter] += 1
            if counter[letter] == 1:
                letterToIndex[letter] = index
            else:
                if letterToIndex.get(letter) != None:
                    del letterToIndex[letter]
                
        if letterToIndex:
            return letterToIndex[min(letterToIndex, key=lambda k: letterToIndex[k])]
        else:
            return -1

3)

class Solution(object):
    def subdomainVisits(self, cpdomains):
        counter = collections.Counter()
        for cpdomain in cpdomains:
            count = int(cpdomain.split(" ")[0])
            domain = cpdomain.split(" ")[1]
            for index, c in enumerate(domain):
                subdomain = ""
                if index == 0:
                    subdomain = domain
                elif c == ".":
                    subdomain = domain[index+1:]
                
                if subdomain != "":
                    if counter[subdomain] == 0:
                        counter[subdomain] = count
                    else:
                        counter[subdomain] += count
           
        toReturn = []
        for item in counter:
            toReturn.append(str(counter[item]) + " " + item)      
            
        return toReturn

4)

class Solution(object):
    def findTheDifference(self, s, t):
        counterS = collections.Counter(s)
        counterT = collections.Counter()
        for index in range(len(t)):
            if counterS[t[index]] == 0:
                return t[index]
            counterT[t[index]] += 1
            if counterT[t[index]] > counterS[t[index]]:
                return t[index]
        
