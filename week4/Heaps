1)

import heapq 
from collections import Counter

class Solution(object):
    def topKFrequent(self, nums, k):
        heapq.heapify(nums)
        counter = Counter()
        
        while nums:
            popped = heapq.heappop(nums)
            counter[popped] += 1
        
        kMostFrequent = []
        
        for i in range(k):
            kMostFrequent.append(counter.most_common()[i][0])
            
        return kMostFrequent

2)

import heapq
class Solution(object):
    def mergeKLists(self, lists):
        minheap = []
        for list in lists:
            currNode = list
            while currNode is not None:
                heapq.heappush(minheap,currNode.val)
                currNode = currNode.next 
        
        toReturn = None
        toReturnIterate = None
        while minheap:
            poppedNode = ListNode(heapq.heappop(minheap))
            if not toReturn:
                toReturn = poppedNode
                toReturnIterate = poppedNode
            else:
                toReturnIterate.next = poppedNode
                toReturnIterate = toReturnIterate.next 
        return toReturn
