1) 

from collections import deque

class MyStack(object):

    def __init__(self):
        self.queue1 = deque()
        self.queue2 = deque()

    def push(self, x):
        if self.queue1:
            while self.queue1:
                popped = self.queue1.popleft()
                self.queue2.append(popped)
            self.queue1.append(x)
            while self.queue2:
                popped = self.queue2.popleft()
                self.queue1.append(popped)
        else:
            self.queue1.append(x)

    def pop(self):
        return self.queue1.popleft()
        

    def top(self):
        return self.queue1[0]
        

    def empty(self):
        return (len(self.queue1) == 0)


2)

class MyQueue(object):

    def __init__(self):
        self.stack1 = []
        self.stack2 = []
        

    def push(self, x):
        if self.stack1:
            while self.stack1:
                popped = self.stack1.pop()
                self.stack2.append(popped)
            self.stack1.append(x)
            while self.stack2:
                popped = self.stack2.pop()
                self.stack1.append(popped)
        else:
            self.stack1.append(x)
        

    def pop(self):
        return self.stack1.pop()
        

    def peek(self):
        return self.stack1[-1]
        

    def empty(self):
        return (len(self.stack1) == 0)

3)

from collections import deque

class Solution(object):
    def rotate(self, nums, k):
        queue = deque()
        for i in range(len(nums)-k%len(nums)):
            queue.append(nums[i])
            
        for i in range(min(k%len(nums),len(nums))):
            nums[i] = nums[len(nums)-k%len(nums)+i]
        
        for i in range(k%len(nums),len(nums)):
            popped = queue.popleft()
            nums[i] = popped