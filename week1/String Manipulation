1) 

class Solution(object):
    def reverseString(self, s):
        for index in range(0,(len(s)/2)):
            temp = s[index]
            s[index] = s[len(s) - 1 - index]
            s[len(s) - 1 - index] = temp
        return s

2)

class Solution(object):
    def detectCapitalUse(self, word):
        isCapitalUsageValid = True
        if len(word) == 1:
            return isCapitalUsageValid;
        allFollowingLettersLowerCase = False
        allFollowingLettersUpperCase = False
        for index, letter in enumerate(word):
            if (index == 0):
                if letter.isupper():
                    if word[index+1].isupper():
                        allFollowingLettersUpperCase = True
                    if word[index+1].islower():
                        allFollowingLettersLowerCase = True
                else:
                    allFollowingLettersLowerCase = True
            else:
                if (allFollowingLettersLowerCase):
                    if letter.isupper():
                        isCapitalUsageValid = False
                        break
                if (allFollowingLettersUpperCase):
                    if letter.islower():
                        isCapitalUsageValid = False
                        break     
        return isCapitalUsageValid

3)

class Solution(object):
    def reverseWords(self, s):
        words = s.split(' ');
        for index, word in enumerate(words):
            words[index] = self.reverseString(list(word))
        return ' '.join(words)
        
    def reverseString(self, s):
        for index in range(0,(len(s)/2)):
            temp = s[index]
            s[index] = s[len(s) - 1 - index]
            s[len(s) - 1 - index] = temp
        return ''.join(s)


4)

class Solution(object):
    def isPalindrome(self, s):
        joinedWord = ''.join(letter for letter in s if letter.isalpha() or letter.isdigit())
        for index in range(0,len(joinedWord)/2):
            if (joinedWord[index].lower() != joinedWord[len(joinedWord) - 1 - index].lower()):
                return False
        return True

5)

class Solution(object):
    def reverseVowels(self, s):
        sArray = list(s)
        left = self.findNextLeftVowelIndex(sArray, 0)
        right = self.findNextRightVowelIndex(sArray, len(sArray)-1)
        while (right > left):
            temp = sArray[left]
            sArray[left] = sArray[right]
            sArray[right] = temp
            left = left+1
            right = right-1
            left = self.findNextLeftVowelIndex(sArray, left)
            right = self.findNextRightVowelIndex(sArray, right)
        return ''.join(sArray)
            
    def isVowel(self, letter):
        return (letter.lower() in ('a', 'e', 'i', 'o', 'u'))
    
    def findNextLeftVowelIndex(self, letters, leftIndex):
        addedPosition = 0
        while((leftIndex < (len(letters)-1)) and (not self.isVowel(letters[leftIndex]))):
            leftIndex = leftIndex + 1
        return leftIndex
    
    def findNextRightVowelIndex(self, letters, rightIndex):
        subtractedPosition = 0
        while((rightIndex >= 0) and (not self.isVowel(letters[rightIndex]))):
            rightIndex = rightIndex - 1
        return rightIndex

6)


class Solution(object):
    def longestCommonPrefix(self, strs):
        letterIndex = 0;
        toReturn = []
        prefixLetter = self.returnCommonPrefixLetter(strs, letterIndex)
        while(prefixLetter != ""):
            toReturn.append(prefixLetter)
            letterIndex = letterIndex + 1
            prefixLetter = self.returnCommonPrefixLetter(strs, letterIndex)
        return ''.join(toReturn)
         
    def returnCommonPrefixLetter(self, strs, letterIndex):
        for index in range(len(strs)-1):
            if (letterIndex > len(strs[index])-1):
                return ""
            if (letterIndex > len(strs[index+1])-1):
                return ""
            if strs[index][letterIndex] != strs[index+1][letterIndex]:
                return ""
        if ((len(strs) > 0) and (letterIndex < len(strs[0]))):
            return strs[0][letterIndex]
        else:
            return ""
